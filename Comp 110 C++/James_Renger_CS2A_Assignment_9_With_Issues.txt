// CS2A Lab 8 Option A
// James Renger's Solution:
// Original - Student Framework CS 2A Fall 2016

/* Notes: 
Creates object arrays, sorts the data by sort type, calculates median score.
*/

#include <string>
#include <iostream>
#include <sstream>
using namespace std;

// class Student prototype -----------------------
class Student
{
private: 
   string lastName;
   string firstName;
   int totalPoints;
   int sortKey;

public:
   static const string DEFAULT_NAME;
   static const int DEFAULT_POINTS = 0;
   static const int MAX_POINTS = 1000;
   static const int SORT_BY_FIRST = 88;
   static const int SORT_BY_LAST = 98;
   static const int SORT_BY_POINTS = 108;

public:
   Student( string lst = DEFAULT_NAME, string fst = DEFAULT_NAME,
       long pts = DEFAULT_POINTS, int sort = Student::SORT_BY_POINTS);

   // accessors and mutators
   string getLastName() { return lastName; }
   string getFirstName() { return firstName; } 
   int getTotalPoints() { return totalPoints; }
   int getSortKey() { return sortKey; }

   bool setLastName(string last);
   bool setFirstName(string first);
   bool setPoints(int pts);
   bool setSortKey(int key);

   static int compareTwoStudents( Student firstStud, Student secondStud );
   string toString();

private: 
   static bool validString( string testStr );
   static bool validPoints( int testPoints );

};  // end of class Student prototype --------------

// class StudentArrayUtilities prototype -----------------------
class StudentArrayUtilities
{
public:
   static string toString(string title, Student data[], int arraySize);
   static void arraySort(Student array[], int arraySize);
   static double getMedianDestructive(Student array[], int arraySize);

private:
   static bool floatLargestToTop(Student data[], int top);
   static void mySwap(Student &a, Student &b);
};


// static initializations that can't be done in-line
const string Student::DEFAULT_NAME = "zz-error";

int main()
{
   string output;
   Student  evenClass[] = 
   {  
       Student("smith","fred", 95, Student :: SORT_BY_LAST),  Student("bauer","jack",123),
      Student("jacobs","carrie", 195),  Student("renquist","abe",148),
      Student("3ackson","trevor", 108),  Student("perry","fred",225),
      Student("loceff","fred", 44),  Student("stollings","pamela",452),
      Student("charters","rodney", 295),  Student("cassar","john",321),
      Student("hendrix","Jimi",117), Student("vicious","Sid", 80), 
      Student("winehouse","Amy", 130),  Student("joplin","Janis",142),
      Student("morrison","Jim", 154),  Student("cobain","Kurt",105),
   };
//   evenClass[].setSortKey(SORT_BY_POINTS);
   Student  oddClass[] = 
   {  
      Student("bauer","jack",123),
      Student("jacobs","carrie", 195),  Student("renquist","abe",148),
      Student("3ackson","trevor", 108),  Student("perry","fred",225),
      Student("loceff","fred", 44),  Student("stollings","pamela",452),
      Student("charters","rodney", 295),  Student("cassar","john",321),
      Student("hendrix","Jimi",117), Student("vicious","Sid", 80), 
      Student("winehouse","Amy", 130),  Student("joplin","Janis",142),
      Student("morrison","Jim", 154),  Student("cobain","Kurt",105),
   };
// One Man class
   Student soloClass[] = { Student("smith","fred", 95)};  
// Random Extra, because we were told to do one extra  
   Student directionsUnclear;

// Store Class sizes to variables
   int evenArraySize = sizeof(evenClass) / sizeof(evenClass[0]);
   int oddArraySize = sizeof(oddClass) / sizeof(oddClass[0]);

// Output Before and first Sort
   output = StudentArrayUtilities::toString("Before: \n", evenClass, evenArraySize);
   cout << output;
   StudentArrayUtilities::arraySort(evenClass, evenArraySize);
   output = StudentArrayUtilities::toString("After default sort(Last):\n ", evenClass, evenArraySize);
   cout << output;

// Output Sort By First
   evenClass[0].setSortKey(Student::SORT_BY_FIRST);
   StudentArrayUtilities::arraySort(evenClass, evenArraySize);
   cout << evenClass[0].getSortKey();
   output = StudentArrayUtilities::toString("After sort by first:\n ", evenClass, evenArraySize);
   cout << output;

// Output Sort By Points
   evenClass[0].setSortKey(Student::SORT_BY_POINTS);
   StudentArrayUtilities::arraySort(evenClass, evenArraySize);
   cout << evenClass[0].getSortKey();
   output = StudentArrayUtilities::toString("After sort by Points:\n ", evenClass, evenArraySize);
   cout << output;

// Output median
   evenClass[0].setSortKey(Student::SORT_BY_FIRST);
   double median = StudentArrayUtilities::getMedianDestructive(evenClass, evenArraySize);
   cout << median << "is the Median of EvenArray \n" ;

   median = StudentArrayUtilities::getMedianDestructive(oddClass, oddArraySize);
   cout << median << "is the Median of oddArray \n" ;

   median = StudentArrayUtilities::getMedianDestructive(soloClass, 1);
   cout << median << "is the Median of soloClass \n" ;
   cout << evenClass[0].getSortKey();

return 0;
}

// beginning of Student method definitions -------------

// constructor requires parameters - no default supplied
Student::Student( string last, string first, long points, int sortKey)
{
   if ( !setLastName(last) )
      lastName = DEFAULT_NAME;
   if ( !setFirstName(first) )
      firstName = DEFAULT_NAME;
   if ( !setPoints(points) )
      totalPoints = DEFAULT_POINTS;
   if ( !setSortKey(sortKey))
       sortKey = SORT_BY_LAST;
}

bool Student::setLastName(string last)
{
   if ( !validString(last) )
      return false;
   lastName = last;
   return true;
}

bool Student::setFirstName(string first)
{
   if ( !validString(first) )
      return false;
   firstName = first;
   return true;
}

bool Student::setPoints(int pts)
{
   if ( !validPoints(pts) )
      return false;
   totalPoints = pts;
   return true;
}

bool Student::setSortKey(int key)
{
    if (key != Student::SORT_BY_FIRST && key != Student::SORT_BY_LAST &&
       key != Student::SORT_BY_POINTS)
        return false;
    sortKey = key;
    return true;
}

// could be an instance method and, if so, would take one parameter
int Student::compareTwoStudents( Student firstStud, Student secondStud )
{
   int result;
   int tempSortKey = firstStud.getSortKey();

   switch(tempSortKey)
   {
   case Student::SORT_BY_FIRST:  
           {
               result = firstStud.firstName.compare(secondStud.firstName);
               break;
           }
   case Student::SORT_BY_LAST:
           {
               result = firstStud.lastName.compare(secondStud.lastName);  
               break; 
           }
   case Student::SORT_BY_POINTS: 
           {
               if (firstStud.totalPoints > secondStud.totalPoints)
                   result = 1;
               else 
                   result = 0;
           }
       }
   secondStud.setSortKey(tempSortKey);
   return result;
}

string Student::toString()
{
   string resultString;
   ostringstream cnvrtFirst, cnvrtLast, cnvrtPoints;

   cnvrtFirst << firstName;
   cnvrtLast << lastName;
   cnvrtPoints << totalPoints;

   resultString = " "+ cnvrtLast.str() 
      + ", " + cnvrtFirst.str()
      + " points: " + cnvrtPoints.str()
      + "\n";
   return resultString;
}

bool Student::validString( string testStr )
{
   if (testStr.length() > 0 && isalpha(testStr[0]))
      return true;
   return false;
}

bool Student::validPoints( int testPoints )
{
   if (testPoints >= 0 && testPoints <= MAX_POINTS)
      return true;
   return false;
}
// end of Student method definitions  --------------

// beginning of StudentArrayUtilities method definitions -------------
// print the array with string as a title for the message box
// this is somewhat controversial - we may or may not want an I/O
// methods in this class.  we'll accept it today
string StudentArrayUtilities::toString(string title, Student data[], int arraySize)
{
   string output = "";

   output += title;

   // build the output string from the individual Students:
   for (int k = 0; k < arraySize; k++)
      output += " "+ data[k].toString();

   return output;
}

void StudentArrayUtilities::arraySort(Student array[], int arraySize)
{
   for (int k = 0; k < arraySize; k++)
      // compare with method def to see where inner loop stops
         if (!floatLargestToTop(array, arraySize-1-k))
            return;
}

// returns true if a modification was made to the array
bool StudentArrayUtilities::floatLargestToTop(Student data[], int top)
{
   bool changed = false;

   // compare with client call to see where the loop stops
   for (int k =0; k < top; k++)
      if (  Student::compareTwoStudents(data[k], data[k+1]) > 0 )
      {
         mySwap(data[k], data[k+1]);
         changed = true;
      }
      return changed;
}

void StudentArrayUtilities::mySwap(Student &a, Student &b)
{
   Student temp("", "", 0, 0);

   temp = a;
   a = b;
   b = temp;
}  

double StudentArrayUtilities::getMedianDestructive(Student array[], int arraySize)
{
    double median = 0;
    int temp = array[0].getSortKey();
    
    //set sort to sort by points then sort
    array[0].setSortKey(Student::SORT_BY_POINTS);
    StudentArrayUtilities::arraySort(array, arraySize);

    if (arraySize >= 2)
        if (arraySize % 2 == 0)
            median = (array[((arraySize / 2) - 1)].getTotalPoints() + 
            array[((arraySize / 2))].getTotalPoints() / 2);
        else
            median = (array[(arraySize / 2)].getTotalPoints()); 
    else
        median = array[0].getTotalPoints();
    
    //Restore previous sort and sort
    array[0].setSortKey(temp);
    StudentArrayUtilities::arraySort(array, arraySize);

    return median;
}
// end of StudentArrayUtilities method definitions  --------------


/*  Run
Before:
  smith, fred points: 95
  bauer, jack points: 123
  jacobs, carrie points: 195
  renquist, abe points: 148
  zz-error, trevor points: 108
  perry, fred points: 225
  loceff, fred points: 44
  stollings, pamela points: 452
  charters, rodney points: 295
  cassar, john points: 321
  hendrix, Jimi points: 117
  vicious, Sid points: 80
  winehouse, Amy points: 130
  joplin, Janis points: 142
  morrison, Jim points: 154
  cobain, Kurt points: 105
After default sort(Last):
   loceff, fred points: 44
  smith, fred points: 95
  vicious, Sid points: 80
  cobain, Kurt points: 105
  zz-error, trevor points: 108
  hendrix, Jimi points: 117
  bauer, jack points: 123
  winehouse, Amy points: 130
  joplin, Janis points: 142
  renquist, abe points: 148
  morrison, Jim points: 154
  jacobs, carrie points: 195
  perry, fred points: 225
  charters, rodney points: 295
  cassar, john points: 321
  stollings, pamela points: 452
88After sort by first:
   loceff, fred points: 44
  smith, fred points: 95
  vicious, Sid points: 80
  cobain, Kurt points: 105
  zz-error, trevor points: 108
  hendrix, Jimi points: 117
  bauer, jack points: 123
  winehouse, Amy points: 130
  joplin, Janis points: 142
  renquist, abe points: 148
  morrison, Jim points: 154
  jacobs, carrie points: 195
  perry, fred points: 225
  charters, rodney points: 295
  cassar, john points: 321
  stollings, pamela points: 452
108After sort by Points:
   loceff, fred points: 44
  smith, fred points: 95
  vicious, Sid points: 80
  cobain, Kurt points: 105
  zz-error, trevor points: 108
  hendrix, Jimi points: 117
  bauer, jack points: 123
  winehouse, Amy points: 130
  joplin, Janis points: 142
  renquist, abe points: 148
  morrison, Jim points: 154
  jacobs, carrie points: 195
  perry, fred points: 225
  charters, rodney points: 295
  cassar, john points: 321
  stollings, pamela points: 452
201is the Median of EvenArray
142is the Median of oddArray
95is the Median of soloClass
88Press any key to continue . . .

*/